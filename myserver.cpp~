/* myserver.c */
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <dirent.h>
#include "FileController.h"
#define BUF 1024
#define PORT 6543

using namespace std;


int main (void) {
  int create_socket, new_socket;
  socklen_t addrlen;
  char buffer[BUF];
  int size;
  struct sockaddr_in address, cliaddress;

  create_socket = socket (AF_INET, SOCK_STREAM, 0);

  memset(&address,0,sizeof(address));
  address.sin_family = AF_INET;
  address.sin_addr.s_addr = INADDR_ANY;
  address.sin_port = htons (PORT);

  if (bind ( create_socket, (struct sockaddr *) &address, sizeof (address)) != 0) {
     perror("bind error");
     return EXIT_FAILURE;
  }
  listen (create_socket, 1);
  
  addrlen = sizeof (struct sockaddr_in);

  while (1) {
     printf("Waiting for connections...\n");
     new_socket = accept ( create_socket, (struct sockaddr *) &cliaddress, &addrlen );
     if (new_socket > 0)
     {
        printf ("Client connected from %s:%d...\n", inet_ntoa (cliaddress.sin_addr),ntohs(cliaddress.sin_port));
        strcpy(buffer,"Welcome to myserver, Please enter your command:\n");
        send(new_socket, buffer, strlen(buffer),0);
     }
     do {
     	memset(buffer, 0, BUF);
        FileController fc;
        size = recv (new_socket, buffer, BUF-1, 0);
        string eingang = buffer;

        if( size > 0)
        {
           buffer[size] = '\0';
           if(eingang=="put")
           {
           	memset(buffer, 0, BUF);
           	recv(new_socket, buffer, BUF-1,0);
           	string filename = buffer;
           	
            memset(buffer, 0, BUF);
            cout<<filename<<endl;
           	if(filename!="NO"){
            recv(new_socket, buffer, BUF-1, 0);
           	string datei = buffer;

           	 cout<<"Filename= "<<filename<<endl;
           	 cout<<"Datei= "<<datei;

            
            	fc.writeFile(filename, datei,0);

            }else
            cout<<"Geht nicht!"<<endl;

           }else if(eingang=="get"){

         	memset(buffer, 0, BUF);
           	recv(new_socket, buffer, BUF-1,0);
           	string filename = buffer;
           	cout<<filename<<endl;
          if(!fc.checkIfExists(filename,0)){
      	     filename = "NO";          
            cout<<"Die Datei wurde nicht gefunden."<<endl;
          }else{
          	send(new_socket,filename.c_str(),filename.size(),0);
            filename = fc.getFile(filename,0);
            cout<<filename<<endl;
          }
        	send(new_socket, filename.c_str(),filename.size(), 0); 

           }else
           if(eingang=="list")
           {

           	DIR *d;
              struct dirent *dir;
              d = opendir("./download");

              int counterStrike=0;
             string gPaket="";
              if(d)
              {
                while ((dir = readdir(d)) != NULL)
                {
                	
                	gPaket+=dir->d_name;
                	gPaket+="\n";
                }
                closedir(d);

              }
              send(new_socket,gPaket.c_str(),gPaket.size(),0);

           }
           else
           	cout<<"Message received: "<<eingang<<endl;
           //printf ("Message received: %s\n", buffer);
        }
        else if (size == 0)
        {
           printf("Client closed remote socket\n");
           break;
        }
        else
        {
           perror("recv error");
           return EXIT_FAILURE;
        }
     } while (strncmp (buffer, "quit", 4)  != 0);
     close (new_socket);
  }
  close (create_socket);
  return EXIT_SUCCESS;
}
